---
- name: Create LAMP Server with MySQL, Apache, PHP, and Drupal
  hosts: web
  become: true

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Update apt cache if needed
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

  handlers:
    - name: Restart apache
      ansible.builtin.service:
        name: apache2
        state: restarted

  tasks:
    - name: Get software for apt repository management
      ansible.builtin.apt:
        name: "{{item}}"
        state: present
      with_items:
        - python3-apt
        - python3-pycurl

    - name: Add ondrej repository for later versions of PHP
      ansible.builtin.apt_repository:
        repo: 'ppa:ondrej/php'
        state: present
        update_cache: true

    - name: Install Apache, MySQL, PHP and other dependencies for our LAMP server.
      ansible.builtin.apt:
        state: present
        name:
          - acl
          - git
          - curl
          - unzip
          - sendmail
          - apache2
          - php7.4-common
          - php7.4-cli
          - php7.4-dev
          - php7.4-gd
          - php7.4-curl
          - php7.4-json
          - php7.4-opcache
          - php7.4-xml
          - php7.4-mbstring
          - php7.4-mysql
          - php7.4-pdo
          - php-apcu
          - libpcre3-dev
          - libapache2-mod-php7.4
          - python3-mysqldb
          - mysql-server

   # - name: Disable firewall
   #   ansible.builtin.service:
   #     name: ufw
   #     state: stopped
   #     enabled: no
    
    - name: Start Apache, MySQL and PHP
      ansible.builtin.service:
        name: "{{item}}"
        state: started
        enabled: true
      with_items:
        - apache2
        - mysql

    - name: Enable Apache rewrite module (required for Drupal)
      community.general.apache2_module:
        name: rewrite
        state: present
      notify: Restart apache

    - name: Add Apache virtualhost for Drupal
      ansible.builtin.template:
        src: templates/drupal.test.conf.j2
        dest: /etc/apache2/sites-available/{{domain}}.test.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart apache

    - name: Enable the Drupal site.
      ansible.builtin.command:
        cmd: "a2ensite {{domain}}.test"
        creates: /etc/apache2/sites-enabled/{{domain}}.test.conf
      notify: Restart apache

    - name: Disable the default site.
      ansible.builtin.command:
        cmd: a2dissite 000-default
        # removes=/etc/apache2/sites-enabled/000-default.conf
      notify: Restart apache
      changed_when: false

    - name: Adjust OpCache memory setting.
      ansible.builtin.lineinfile:
        dest: /etc/php/7.4/apache2/conf.d/10-opcache.ini
        regexp: '^opcache.memory_consumption'
        line: 'opcache.memory_consumption=96'
        state: present
      notify: Restart apache

    - name: Create MySQL DB for Drupal
      ansible.builtin.mysql_db:
        db: "{{ domain }}"
        state: present

    - name: Create MySQL user for Drupal
      ansible.builtin.mysql_user:
        name: "{{ domain }}"
        password: "1234"
        priv: "{{ domain }}.*:ALL"
        host: localhost
        state: present

    - name: Download composer installer
      ansible.builtin.get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-installer.php
        mode: '0755'

    - name: Run composer installer
      ansible.builtin.command:
        cmd: php /tmp/composer-installer.php
        chdir: /tmp
        creates: /usr/local/bin/composer

    - name: Move composer into globally-accessible location
      ansible.builtin.command:
        cmd: mv /tmp/composer.phar /usr/local/bin/composer
        creates: /usr/local/bin/composer

    - name: Ensure Drupal directory exists 
      ansible.builtin.file:
        path: "{{ drupal_core_path }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0777'

    - name: Check if Drupal project already exists
      ansible.builtin.stat:
        path: "{{ drupal_core_path }}/composer.json"
      register: drupal_composer_json

    - name: Create Drupal project with composer
      community.general.composer:
        command: create-project
        arguments: drupal/recommended-project "{{ drupal_core_path }}"
        working_dir: "{{ drupal_core_path }}"
        no_dev: true
      become_user: www-data
      when: not drupal_composer_json.stat.exists

    - name: Add drush to Drupal site with composer
      community.general.composer:
        command: require
        arguments: drush/drush:10.*
        working_dir: "{{ drupal_core_path }}"
      become_user: www-data
      when: not drupal_composer_json.stat.exists

    - name: Install Drupal
      ansible.builtin.shell:
        cmd: vendor/bin/drush si -y --site-name="{{ drupal_site_name }}" --account-name=admin --account-pass=admin --db-url=mysql://{{ domain }}:1234@localhost/{{ domain }} --root={{ drupal_core_path }}/web
        chdir: "{{ drupal_core_path }}"
        creates: "{{ drupal_core_path }}/web/sites/default/settings.php"
      notify: Restart apache
      become_user: www-data

